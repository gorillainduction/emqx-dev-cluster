#!/bin/bash
set -euo pipefail

[ -z ${LOG_LEVEL+x}    ] && export LOG_LEVEL=notice
[ -z ${N_NODES+x}      ] && export N_NODES=10
[ -z ${N_CORE_NODES+x} ] && export N_CORE_NODES=3
[ -z ${LB_STRATEGY+x}  ] && export LB_STRATEGY=roundrobin

export STATS_PORT=8898

linux_distro() {
    grep DISTRIB_ID /etc/lsb-release | cut -f2 -d'='
}

docker_image() {
    case $(linux_distro) in
      Arch)
        echo "archlinux/archlinux:base-devel-20211019.0.37052"
        ;;
      *)
        echo "ubuntu/21.04"
        ;;
    esac
}

erts_directory() {
    pattern="_build/emqx/rel/emqx/erts-*"
    directories=( $pattern )
    echo "${directories[0]}"
}

assert_rel_built() {
    ERTS_DIR=$(erts_directory)
    if [ ! -d "$ERTS_DIR" ]
    then
      echo "Could not find erts directory!"
      echo 'Did you forget to call "make emqx-rel"?'
      exit 1
    fi
}

host() {
    echo -n "n${1}.local"
}

node() {
    echo -n "emqx@$(host $1)"
}

build() {
    [ "${1}" -eq "1" ] && echo "build: ."
}

CORE_NODES=$(for i in $(seq 1 $N_CORE_NODES); do
                 node $i
                 [ $i -eq $N_CORE_NODES ] || echo -n ','
             done)

container() {
    cat <<EOF
  emqx${1}:
    $(build $1)
    image: emqx
    hostname: $(host $1)
    networks:
      backplane:
        aliases:
          - $(host $1)

    environment:
    - "EMQX_LOG__CONSOLE_HANDLER__ENABLE=true"
    - "EMQX_LOG__CONSOLE_HANDLER__LEVEL=${LOG_LEVEL}"
    - "EMQX_NODE__NAME=$(node $1)"
    - "EMQX_CLUSTER__DB_BACKEND=rlog"
    - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
    - "EMQX_CLUSTER__STATIC__SEEDS=[${CORE_NODES}]"
EOF
}

core() {
    container $1
}

replicant() {
    container $1
    cat <<EOF
    - "EMQX_CLUSTER__RLOG__ROLE=replicant"
    - "EMQX_CLUSTER__RLOG__CORE_NODES=${CORE_NODES}"
EOF
}

create_dockerfiles() {
    # EMQ X dockerfile
    [ -f "Dockerfile" ] || {
        assert_rel_built
        ERTS_DIR=$(erts_directory)
        cat <<EOF > Dockerfile
FROM $(docker_image)
COPY _build/emqx/rel/emqx/bin /opt/emqx/bin
COPY ${ERTS_DIR} /opt/emqx/${ERTS_DIR##_build/emqx/rel/emqx/}
COPY _build/emqx/rel/emqx/etc /opt/emqx/etc
COPY _build/emqx/rel/emqx/lib /opt/emqx/lib
COPY _build/emqx/rel/emqx/plugins /opt/emqx/plugins
COPY _build/emqx/rel/emqx/releases /opt/emqx/releases

WORKDIR /opt/emqx

CMD /opt/emqx/bin/emqx foreground
EOF

    }
    # Haproxy dockerfile
    mkdir -p haproxy
    pushd haproxy
    cat <<EOF > haproxy.cfg
defaults
  log global
  option dontlognull
  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms

listen stats
  bind *:${STATS_PORT}
  mode http
  stats enable
  stats refresh 1s
  stats show-node
  stats uri /

listen mqtt
  bind *:1883
  mode tcp
  option clitcpka # For TCP keep-alive
  timeout client 3h
  timeout server 3h
  option tcplog
  balance ${LB_STRATEGY}
$(for i in $(seq 1 $N_NODES); do
echo "  server emqx$i emqx$i:1883 check"
done)
EOF
    popd
}

create_dockercompose() {
    cat <<EOF > docker-compose.yml
version: '3.3'

networks:
  backplane:

services:
$(for i in $(seq 1 $N_CORE_NODES); do
core $i
done)

$(for i in $(seq $(($N_CORE_NODES+1)) $N_NODES); do
replicant $i
done)

  haproxy:
    image: haproxy:1.7
    depends_on:
$(for i in $(seq 1 $N_NODES); do
echo "    - emqx$i"
done)
    ports:
    - 1883:1883
    - ${STATS_PORT}:${STATS_PORT}
    networks:
      backplane:
    volumes:
    - $(pwd)/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
EOF
}

create_dockerfiles
create_dockercompose

if [[ $# -lt 1 ]]; then
    cat docker-compose.yml
else
    docker-compose $@
fi
